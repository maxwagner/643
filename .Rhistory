.49 * .51 ^ 2
.49 * (.51 ^ 2)
p1 <- (factorial(3) / (factorial(2) (3 - 1)))
p1 <- (factorial(3) / (factorial(2) * factorial(3 - 1)))
p1 <- (factorial(3) / (factorial(2) * factorial(3 - 2)))
p2 <- .51 ^ 2
x <- .49 * (.51 ^ 2); x
p3 <- (1 - .51) ^ (3 - 2)
answer <- p1 * p2 * p3
p1 <- factorial(3) / (factorial(2) * factorial(3 - 2))
p2 <- .51 ^ 2
p3 <- (1 - .51) ^ (3 - 2)
answer <- p1 * p2 * p3
p1 <- (factorial(3) / (factorial(2) * factorial(3 - 2)))
p2 <- .51 ^ 2 * ((1 - .51) ^ (3 - 2))
answer <- p1 * p2
outcomes <- matrix("G", "G", "B", "G", "B", "G", "B", "G", "G", byrow = T, nrow = 3)
outcomes <- matrix(c("G", "G", "B", "G", "B", "G", "B", "G", "G"), byrow = T, nrow = 3)
outcomes
g_1_2 <- (.49 ^ 1) * (1 - .49) ^ (1 - 1)
outcomes <- matrix(c("G", "B", "B", "B", "G", "B", "B", "B", "G"), byrow = T, nrow = 3)
outcomes
g_1_1 <- (.49 ^ 0) * (1 - .49) ^ (0 - 0)
.49 ^ 0
(.49 ^ 1) * (1 - .49) ^ (1 - 1)
(factorial(3) / (factorial(2) * factorial(3 - 2))) * (.49 ^ 1) * (1 - .49) ^ (1 - 1)
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * (.49 ^ 1) * (1 - .49) ^ (1 - 1)
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (3 - 2))
answer <- g_1_1 * b_1_2 * b_2_3
answer <- p1 * p2 * p3; answer
p1 <- factorial(3) / (factorial(2) * factorial(3 - 2))
p2 <- .51 ^ 2
p3 <- (1 - .51) ^ (3 - 2)
answer <- p1 * p2 * p3; answer
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (3 - 2))
answer <- g_1_1 * b_1_2 * b_2_3
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (3 - 2))
answer <- g_1_1 * b_1_2 * b_2_3; answer
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer <- g_1_1 * b_1_2 * b_2_3; answer
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
outcomes <- matrix(c("G", "B", "B", "B", "G", "B", "B", "B", "G"), byrow = T, nrow = 3); outcomes
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
g_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.49 ^ 2) * (1 - .49) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_bgb <- b_1_1 * g_1_2 * b_2_3; answer_bgb
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_gbb <- g_1_1 * b_1_2 * b_2_3; answer_gbb
g_1_3 <- (factorial(2) / (factorial(0) * factorial(2 - 0))) * ((.49 ^ 3) * (1 - .49) ^ (3 - 1))
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
b_2_2 <- (factorial(1) / (factorial(1) * factorial(1 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 2))
g_1_3 <- (factorial(2) / (factorial(0) * factorial(2 - 0))) * ((.49 ^ 3) * (1 - .49) ^ (3 - 1))
answer_bbg <- b_1_1 * b_2_2 * g_1_3; answer_bbg
dbinom(4, size=12, prob=0.2)
dbinom(2, size = 3, prob = 0.51)
p1 <- factorial(3) / (factorial(2) * factorial(3 - 2))
p2 <- .51 ^ 2
p3 <- (1 - .51) ^ (3 - 2)
answer <- p1 * p2 * p3; answer
install.packages("stats")
install.packages("stats")
install.packages("stats")
dnbinom(2, size = 3, prob = 0.51)
dnbinom(2, size = 2, n = 3, prob = 0.51)
answer <- answer_gbb + answer_bgb + answer_bbg
dnbinom(2, size = 2, prob = 0.51) # with dnbinom
pbinom(2, size = 3, prob = 0.51) # with dnbinom
dnbinom(2, size = 3, prob = 0.51) # with dnbinom
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_gbb <- g_1_1 * b_1_2 * b_2_3 #GBB
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
g_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.49 ^ 2) * (1 - .49) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_bgb <- b_1_1 * g_1_2 * b_2_3 #BGB
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
b_2_2 <- (factorial(1) / (factorial(1) * factorial(1 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 2))
answer_bbg <- b_1_1 * b_2_2# BBG
answer <- answer_gbb + answer_bgb + answer_bbg; answer # final
# GBB
.49 * .51 * .51
# BGB
.51 * .49 * .51
# BBG
.51 * .51 * .49
dnbinom(2, size = 3, prob = 0.51) # with dnbinom
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_gbb <- g_1_1 * b_1_2 * b_2_3 #GBB
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
g_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.49 ^ 2) * (1 - .49) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_bgb <- b_1_1 * g_1_2 * b_2_3 #BGB
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
b_2_2 <- (factorial(1) / (factorial(1) * factorial(1 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 2))
g_1_3 <- (factorial(2) / (factorial(0) * factorial(2 - 0))) * ((.49 ^ 3) * (1 - .49) ^ (3 - 1))
answer_bbg <- b_1_1 * b_2_2 * g_1_3;# BBG
answer <- answer_gbb + answer_bgb + answer_bbg; answer # final
g_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.49 ^ 1) * (1 - .49) ^ (1 - 1))
b_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_gbb <- g_1_1 * b_1_2 * b_2_3 #GBB
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
g_1_2 <- (factorial(1) / (factorial(0) * factorial(1 - 0))) * ((.49 ^ 2) * (1 - .49) ^ (2 - 1))
b_2_3 <- (factorial(2) / (factorial(1) * factorial(2 - 1))) * ((.51 ^ 3) * (1 - .51) ^ (3 - 2))
answer_bgb <- b_1_1 * g_1_2 * b_2_3 #BGB
b_1_1 <- (factorial(0) / (factorial(0) * factorial(0 - 0))) * ((.51 ^ 1) * (1 - .51) ^ (1 - 1))
b_2_2 <- (factorial(1) / (factorial(1) * factorial(1 - 1))) * ((.51 ^ 2) * (1 - .51) ^ (2 - 2))
g_1_3 <- (factorial(2) / (factorial(0) * factorial(2 - 0))) * ((.49 ^ 3) * (1 - .49) ^ (3 - 1))
answer_bbg <- b_1_1 * b_2_2 * g_1_3;# BBG
answer <- answer_gbb + answer_bgb + answer_bbg; answer # final
(.49) * (.51 ^ 2)
.49 * .51 * .51
(.85 ^ 7) * (.15 ^ 3)
(.85 ^ 7) * (.15 ^ 3)
p1 <- (factorial(10 - 1)) / (factorial(3 - 1) / factorial(10 - 3))
answer <- p1 * p2
p2 <- (.15 ^ 3) * ((1 - .15) ^ (10 - 3))
answer <- p1 * p2
p1 <- (factorial(10 - 1)) / (factorial(3 - 1) / factorial(10 - 3))
p2 <- (.15 ^ 3) * ((1 - .15) ^ (10 - 3))
answer <- p1 * p2
p1 <- (factorial(10 - 1)) / (factorial(3 - 1) / factorial(10 - 3))
p1 <- (factorial(10 - 1)) / (factorial(3 - 1) * factorial(10 - 3))
p2 <- (.15 ^ 3) * (.85 ^ 7)
answer <- p1 * p2
answer <- p1 * p2; answer
dbinom(3, 10, .15)
dbinom(2, 3, .51)
.49 * .51 * .51
p1 <- (factorial(10 - 1)) / (factorial(3 - 1) * factorial(10 - 3))
p2 <- (.15 ^ 3) * (.85 ^ 7)
answer <- p1 * p2; answer
p1 <- factorial(3) / (factorial(2) * factorial(3 - 2))
p2 <- (.51 ^ 2) * (.49 ^ 1)
answer <- p1 * p2; answer
p1 <- factorial(10) / (factorial(3) * factorial(10 - 3))
p2 <- (.15 ^ 3) * (.85 ^ 7)
answer <- p1 * p2; answer
p1 <- (factorial(10 - 1)) / (factorial(3 - 1) * factorial(10 - 3))
p2 <- (.15 ^ 3) * (.85 ^ 7)
answer <- p1 * p2; answer
p1 <- (factorial(1 - 1)) / (factorial(1 - 1) * factorial(1 - 3))
p2 <- (.49 ^ 1) * (.51 ^ 0)
answer <- p1 * p2; answer
p1 <- (factorial(1 - 1)) / (factorial(1 - 1) * factorial(1 - 1))
p2 <- (.49 ^ 1) * (.51 ^ 0)
answer <- p1 * p2; answer
p1 <- (factorial(2 - 1)) / (factorial(1 - 1) * factorial(2 - 1))
p2 <- (.51 ^ 1) * (.49 ^ 1)
boy_1_2 <- p1 * p2
p1 <- (factorial(3 - 1)) / (factorial(2 - 1) * factorial(3 - 2))
p2 <- (.51 ^ 2) * (.49 ^ 1)
boy_2_3 <- p1 * p2
girl_1_1 + boy_1_2 + boy_2_3
# 1st girl 1st
girl_1_1 <- .49
# 1st boy 2nd
p1 <- (factorial(2 - 1)) / (factorial(1 - 1) * factorial(2 - 1))
p2 <- (.51 ^ 1) * (.49 ^ 1)
boy_1_2 <- p1 * p2
# 2nd boy 3rd
p1 <- (factorial(3 - 1)) / (factorial(2 - 1) * factorial(3 - 2))
p2 <- (.51 ^ 2) * (.49 ^ 1)
boy_2_3 <- p1 * p2
#sum
girl_1_1 + boy_1_2 + boy_2_3
# 1st girl 1st
girl_1_1 <- .49
# 1st boy 2nd
p1 <- (factorial(2 - 1)) / (factorial(1 - 1) * factorial(2 - 1))
p2 <- (.51 ^ 1) * (.49 ^ 1)
boy_1_2 <- p1 * p2
# 2nd boy 3rd
p1 <- (factorial(3 - 1)) / (factorial(2 - 1) * factorial(3 - 2))
p2 <- (.51 ^ 2) * (.49 ^ 1)
boy_2_3 <- p1 * p2
#sum
girl_1_1 + boy_1_2 + boy_2_3
girl_1_1 * boy_1_2 * boy_2_3
p1 <- factorial(3) / (factorial(2) * factorial(3 - 2))
p2 <- (.51 ^ 2) * (.49 ^ 1)
answer <- p1 * p2; answer
girl_1_1 <- 1
# 1st boy 2nd
p1 <- (factorial(2 - 1)) / (factorial(1 - 1) * factorial(2 - 1))
p2 <- (.51 ^ 1) * (.49 ^ 1)
boy_1_2 <- p1 * p2
# 2nd boy 3rd
p1 <- (factorial(3 - 1)) / (factorial(2 - 1) * factorial(3 - 2))
p2 <- (.51 ^ 2) * (.49 ^ 1)
boy_2_3 <- p1 * p2
#sum
girl_1_1 * boy_1_2 * boy_2_3
.51 * .49
.51 * .49 * .51
.127449 * 3
.49 * .51 * .51 * 3
install.packages("sparkR")
setwd("~/github/643")
movies <- read.csv("ml-latest-small/movies.csv", stringsAsFactors = FALSE)
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
ratings <- ratings[,4]
movies <- read.csv("ml-latest-small/movies.csv", stringsAsFactors = FALSE)
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
knitr::kable(head(movies))
knitr::kable(head(ratings))
ratings <- ratings[,-4]
ratings_hori <- acast(ratings, userId ~ movieId, value.var="rating")
ratings_rm <- as(ratings_hori, "realRatingMatrix")
library(reshape2)
library(dplyr)
library(recommenderlab)
library(NMF)
library(ggplot2)
dates <- ratings[,4]
movies <- read.csv("ml-latest-small/movies.csv", stringsAsFactors = FALSE)
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
dates <- ratings[,4]
head(dates)
dates[1]
dates[1] / 60
dates[1] / 60 / 60
20298297/60
dates[1] / 60 / 60 / 24
dates[1] / 60 / 60 / 24 / 365.25
max(dates)
max(dates) / 60/60/24/365.25
knitr::kable(head(movies))
ratings <- ratings[,-4]
knitr::kable(head(movies))
knitr::kable(head(ratings))
knitr::kable(head(dates))
dates$year <- dates/60/60/24/265
dates$year <- dates/60/60/24/365
dates$year <- dates[]/60/60/24/365
dates
dates/60
dates$year <- dates[[]]/60/60/24/365
dates$year <- dates[][]/60/60/24/365
dates[,]/60
dates[][]/60
head(dates)
head(ratings)
dates <- as.vector(ratings[,4])
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
dates <- as.vector(ratings[,4])
ratings <- ratings[,-4]
dates$year <- dates/60/60/24/365
movies <- read.csv("ml-latest-small/movies.csv", stringsAsFactors = FALSE)
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
dates <- as.vector(ratings[,4])
ratings <- ratings[,-4]
dates$year <- dates/60/60/24/365
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
dates <- as.vector(ratings[,4])
ratings <- ratings[,-4]
dates.year <- dates/60/60/24/365
dates <- cbind(dates,dates.year)
head(dates)
dates.year <- dates/60/60/24/365 + 1970
dates <- cbind(dates,dates.year)
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
dates <- as.vector(ratings[,4])
ratings <- ratings[,-4]
dates.year <- dates/60/60/24/365 + 1970
dates <- cbind(dates,dates.year)
head(dates)
summary(dates)
knitr::kable(head(dates))
colnames(dates) <- c("seconds", "year")
knitr::kable(head(movies))
knitr::kable(head(ratings))
knitr::kable(head(dates))
knitr::kable(summary(dates$year))
dates <- as.data.frame(cbind(dates,dates.year))
colnames(dates) <- c("seconds", "year")
knitr::kable(head(movies))
knitr::kable(head(ratings))
knitr::kable(summary(dates$year))
dates$year
summary(dates$year)
knitr::kable(summary(dates$year))
summary(dates$year)
summary(dates$year)
require(reshape2)
install.packages("reshape2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("recommenderlab")
install.packages("NMF")
install.packages("knitr")
install.packages("knitr")
library(reshape2)
library(dplyr)
library(recommenderlab)
library(NMF)
library(ggplot2)
movies <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/movies.csv",
stringsAsFactors = FALSE)
movies <- read.csv("ml-latest-small/movies.csv", stringsAsFactors = FALSE)
ratings <- read.csv("ml-latest-small/ratings.csv", stringsAsFactors = FALSE)
dates <- as.vector(ratings[,4])
ratings <- ratings[,-4]
dates.year <- dates/60/60/24/365 + 1970
dates <- as.data.frame(cbind(dates,dates.year))
colnames(dates) <- c("seconds", "year")
knitr::kable(head(movies))
knitr::kable(head(ratings))
summary(dates$year)
ratings_hori <- acast(ratings, userId ~ movieId, value.var="rating")
ratings_rm <- as(ratings_hori, "realRatingMatrix")
ratings_rm_r <- ratings_rm[, colCounts(ratings_rm) > 20]
ratings_rm_r
movies.recom <- Recommender(ratings_rm_r[1:400], method = "UBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
movies.recom <- Recommender(ratings_rm_r[1:400], method = "IBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
ratings_rm_r <- normalize(ratings_rm_r)
ratings_rm_r <- as(ratings_rm_r, "matrix")
ratings_rm_r[is.na(ratings_rm_r)] <- 0
ratings_svd <- svd(ratings_rm_r)
d_cumul <- cumsum(ratings_svd$d) / sum(ratings_svd$d)
k <- min(which(d_cumul >= 0.8));k
d <- diag(sqrt(ratings_svd$d[1:k]))
u <- ratings_svd$u[,1:k]
v <- ratings_svd$v[1:k,]
recom <- data.frame(u%*%d%*%v)
colnames(recom) <- 1:668
movie.recs <- data.frame(matrix(NA, nrow = 668, ncol = 668))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
user3simi <- movie.recs[3,1]
user.movies <- subset(ratings, userId == user3simi)
user.best <- head(user.movies[order(-user.movies$rating),],3)
user.best <- inner_join(user.best,movies,by = "movieId")
user.best <- user.best[,4:5]
knitr::kable(user.best)
user.movies <- subset(ratings, userId == 3 & rating >= 4)
user.movies <- inner_join(user.movies,movies,by = "movieId")
user.genres <- user.movies[,5]
user.genres.split <- unlist(strsplit(user.genres, split = "|", fixed = TRUE))
user.genres.count <- data.frame(table(user.genres.split))
knitr::kable(head(user.genres.count[order(-user.genres.count$Freq),],5))
movies.o <- movies[,3]
genres.split <- unlist(strsplit(movies.o, split = "|", fixed = TRUE))
genres.count <- data.frame(table(genres.split))
knitr::kable(head(genres.count[order(-genres.count$Freq),],10))
user3simi
movie.recs
movie.recs[3,1]
movie.recs[3,]
