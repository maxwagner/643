movies <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/movies.csv",
stringsAsFactors = FALSE)
ratings <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/ratings.csv",
stringsAsFactors = FALSE)
ratings_hori <- acast(ratings, userId ~ movieId, value.var="rating")
ratings_rm <- as(ratings_hori, "realRatingMatrix")
ratings_rm_r <- ratings_rm[rowCounts(ratings_rm) > 20, colCounts(ratings_rm) > 20]
ratings_rm_r <- normalize(ratings_rm_r)
ratings_rm_r <- as(ratings_rm_r, "matrix")
ratings_svd <- svd(ratings_rm_r)
ratings_rm_r <- normalize(ratings_rm_r)
ratings_rm_r <- as(ratings_rm_r, "matrix")
ratings_rm_r[is.na(ratings_rm_r)] <- 0
ratings_svd <- svd(ratings_rm_r)
head(ratings_rm_r)
library(ggplot2)
qplot(x = 1:100, y = frac_norm, geom = "line") +
geom_hline(yintercept = 0.8, lty = 2, col = 'green4') +
geom_vline(xintercept = min(which(x = frac_norm > 0.8)), lty = 3, col = "green4") +
geom_hline(yintercept = 0.9, lty = 2, col = 'red4') +
geom_vline(xintercept = min(which(x = frac_norm > 0.9)), lty = 3, col = "red4") +
scale_x_continuous('') + scale_y_continuous('') + theme_bw()
norm_Sigma <- sqrt(sum(ratings_svd$d^2, na.rm = TRUE))
frac_norm <- NULL
for (i in 1:length(ratings_svd$d)) {
frac_norm[i] <- sqrt(sum(ratings_svd$d[1:i]^2, na.rm = TRUE)) / norm_Sigma
}
qplot(x = 1:100, y = frac_norm, geom = "line") +
geom_hline(yintercept = 0.8, lty = 2, col = 'green4') +
geom_vline(xintercept = min(which(x = frac_norm > 0.8)), lty = 3, col = "green4") +
geom_hline(yintercept = 0.9, lty = 2, col = 'red4') +
geom_vline(xintercept = min(which(x = frac_norm > 0.9)), lty = 3, col = "red4") +
scale_x_continuous('') + scale_y_continuous('') + theme_bw()
k <- min(which(x = frac_norm > 0.8))
k
frac_norm
k <- min(which(x = frac_norm > 0.8))
k <- min(frac_norm > 0.8)
frac_norm > 0.8
ratings_svd$d
6.512142e+01
norm_Sigma <- sqrt(sum(ratings_svd$d^2, na.rm = TRUE))
frac_norm <- NULL
for (i in 1:length(ratings_svd$d)) {
frac_norm[i] <- sqrt(sum(ratings_svd$d[1:i]^2, na.rm = TRUE)) / norm_Sigma
}
k <- min(which(frac_norm > 0.8))
Sigmak <- Diagonal(x = ratings_svd[1:k])
Sigmak <- Diagonal(ratings_svd[1:k])
Diagonal(3)
ratings_svd
ratings_svd$d
sum(ratings_svd$d)
frac_norm <- NULL
i=1
frac_norm[i]
frac_norm[i] + 1
frac_norm <- 0
frac_norm[i]
frac_norm[i] + 1
for (i in 1:length(ratings_svd$d)) {
frac_norm[i] <- frac_norm[i] + frac_norm
}
warnings()
frac_norm
for (i in 1:length(ratings_svd$d)) {
frac_norm[i] <- sum(frac_norm[i], frac_norm)
}
frac_norm
frac_norm <- 0
frac_norm <- ratings_svd$d[[1]]
for (i in 1:length(ratings_svd$d)) {
frac_norm[i] <- sum(frac_norm, ratings_svd[[i]])
}
ratings_svd[[i]]
norm_Sigma <- sqrt(sum(ratings_svd$d^2, na.rm = TRUE))
frac_norm <- ratings_svd$d[[1]]
for (i in 1:length(ratings_svd$d)-1) {
frac_norm[i] <- sum(frac_norm, ratings_svd$d[[i]])
}
ratings_svd$d[[i]]
for (i in 1:length(ratings_svd$d)) {
frac_norm[i] <- sum(frac_norm, ratings_svd$d[[i]])
}
norm_Sigma <- sqrt(sum(ratings_svd$d^2, na.rm = TRUE))
frac_norm <- ratings_svd$d[[1]]
for (i in 2:length(ratings_svd$d)) {
frac_norm[i] <- sum(frac_norm, ratings_svd$d[[i]])
}
sum(ratings_svd$d)
norm_Sigma <- sqrt(sum(ratings_svd$d^2, na.rm = TRUE))
frac_norm <- ratings_svd$d[[1]]
for (i in 2:length(ratings_svd$d)) {
frac_norm[i] <- sum(frac_norm, ratings_svd$d[[i]]) / sum(ratings_svd$d)
}
frac_norm <- ratings_svd$d[[1]] / sum(ratings_svd$d)
for (i in 2:length(ratings_svd$d)) {
frac_norm[i] <- sum(frac_norm, ratings_svd$d[[i]]) / sum(ratings_svd$d)
}
frac_norm
norm_Sigma <- sqrt(sum(ratings_svd$d^2, na.rm = TRUE))
frac_norm <- ratings_svd$d[[1]] / sum(ratings_svd$d)
for (i in 2:length(ratings_svd$d)) {
frac_norm[i] <- sum(sum(frac_norm), ratings_svd$d[[i]]) / sum(ratings_svd$d)
}
frac_norm
cumsum(ratings_svd$d)
cumsum(ratings_svd$d) / sum(ratings_svd$d)
d_cumul <- cumsum(ratings_svd$d) / sum(ratings_svd$d)
k <- min(which(d_cumul > 0.8))
u <- ratings_svd$d[,1:k]
u <- ratings_svd$d[1:k]
u
ratings_svd$d
u <- ratings_svd$u[,1:k]
u
v <- t(ratings_svd$v[1:k,])
d <- diag(sqrt(ratings_svd$d[1:k]))
ratings_svd$d[1:k]
sqrt(ratings_svd$d[1:k])
d <- diag(sqrt(ratings_svd$d[1:k]))
diag
d
recom <- u%*%d%*%v
plot(ratings_svd$d)
ratings_svd$d[ratings_svd >= 10]
ratings_svd$d[ratings_svd$d >= 10]
ratings_svd$d[1:k]
dim(d)
dim(u)
dim(v)
recom <- u%*%d%*%v
v <- ratings_svd$v[1:k,]
recom <- u%*%d%*%v
dim(v)
head(recom)
dim(recom)
dim(ratings_rm_r)
recom[1,1]
recom[1,]
head(movies)
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- recom[i,order(recom[i,],decreasing = TRUE)]
}
movie.recs
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- recom[i,order(recom[i,],decreasing = TRUE)]
}
head(movie.recs)
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
colnames(recom) <- paste(c('u',1:649))
paste(c('u',1:649))
colnames(recom) <- paste('u',1:649)
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
recom
recom[i,order(recom[i,],decreasing = TRUE)]
colnames(recom) <- paste('u',1:649, sep = '')
recom[i,order(recom[i,],decreasing = TRUE)]
movie.simi[i,order(movie.simi[i,],decreasing = TRUE)]
movies <- read.csv('movies.csv', stringsAsFactors = FALSE)
users <- movies[,1]
movies <- movies[,2:11]
movie.names <- colnames(movies)
head(movies)
users.avg <- rowMeans(movies, na.rm = TRUE)
users.avg.total <- mean(users.avg)
movies.avg <- colMeans(movies, na.rm = TRUE)
movies.avg.total <- mean(movies.avg)
users.mean.centered <- round(movies[] - users.avg,2)
movies.mean.centered <- round(movies[] - movies.avg,2)
head(movies.mean.centered)
users.avg <- rowMeans(movies, na.rm = TRUE)
users.avg.total <- mean(users.avg)
movies.avg <- colMeans(movies, na.rm = TRUE)
movies.avg.total <- mean(movies.avg)
users.mean.centered <- round(movies[] - users.avg,2)
movies.mean.centered <- round(movies[] - movies.avg,2)
head(movies.mean.centered)
movies <- read.csv('movies.csv', stringsAsFactors = FALSE)
users <- movies[,1]
movies <- movies[,2:11]
movie.names <- colnames(movies)
head(movies)
setwd("~/GitHub/643")
movies <- read.csv('movies.csv', stringsAsFactors = FALSE)
users <- movies[,1]
movies <- movies[,2:11]
movie.names <- colnames(movies)
head(movies)
users.avg <- rowMeans(movies, na.rm = TRUE)
users.avg.total <- mean(users.avg)
movies.avg <- colMeans(movies, na.rm = TRUE)
movies.avg.total <- mean(movies.avg)
users.mean.centered <- round(movies[] - users.avg,2)
movies.mean.centered <- round(movies[] - movies.avg,2)
head(movies.mean.centered)
gcos <- function(a,b) {
return(sum(a*b) / (sqrt(sum(a^2)) * sqrt(sum(b^2))))
}
#10x10 matrix for the 10 movies
movie.simi <- matrix(NA, nrow = length(movie.names), ncol = length(movie.names), dimnames = list(colnames(movie.names), rownames(movie.names)))
for(i in 1:ncol(movies.mean.centered)) {
for(j in 1:ncol(movies.mean.centered)) {
movie.simi[i,j] <- gcos(movies.mean.centered[i],movies.mean.centered[j])
}
}
movie.simi <- data.frame(movie.simi)
colnames(movie.simi) <- movie.names
rownames(movie.simi) <- movie.names
movie.recs <- data.frame(matrix(NA, nrow = 10, ncol = 10))
movie.simi[i,order(movie.simi[i,],decreasing = TRUE)]
colnames(movie.simi[i,order(movie.simi[i,],decreasing = TRUE)])
movies <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/movies.csv",
stringsAsFactors = FALSE)
ratings <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/ratings.csv",
stringsAsFactors = FALSE)
ratings <- ratings[,-4]
knitr::kable(head(movies))
knitr::kable(head(ratings))
ratings_hori <- acast(ratings, userId ~ movieId, value.var="rating")
ratings_rm <- as(ratings_hori, "realRatingMatrix")
ratings_rm_r <- ratings_rm[rowCounts(ratings_rm) > 20, colCounts(ratings_rm) > 20]
ratings_rm_r <- normalize(ratings_rm_r)
ratings_rm_r <- as(ratings_rm_r, "matrix")
ratings_rm_r[is.na(ratings_rm_r)] <- 0
ratings_svd <- svd(ratings_rm_r)
d_cumul <- cumsum(ratings_svd$d) / sum(ratings_svd$d)
k <- min(which(d_cumul >= 0.8));k
d <- diag(sqrt(ratings_svd$d[1:k]))
u <- ratings_svd$u[,1:k]
v <- ratings_svd$v[1:k,]
recom <- u%*%d%*%v
colnames(recom) <- paste('u',1:649, sep = '')
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
recom[i,order(recom[i,],decreasing = TRUE)]
colnames(recom[i,order(recom[i,],decreasing = TRUE)])
colnames(recom)
recom <- data.frame(u%*%d%*%v)
colnames(recom) <- paste('u',1:649, sep = '')
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
movie.recs
movie.recs[1,1]
movie.recs[1]
movie.recs[1,4]
head(movie.recs)
recom[163,1]
recom[1,163]
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- recom[i,order(recom[i,],decreasing = TRUE)]
}
head(movie.recs)
recom <- data.frame(u%*%d%*%v)
colnames(recom) <- 1:649
movie.recs <- data.frame(matrix(NA, nrow = 649, ncol = 649))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
head(movie.recs)
View(ratings)
View(ratings_rm_r)
dim(ratings_rm_r)
View(ratings)
dim(ratings_rm)
head(movie.recs)
movie.recs[163]
movie.recs[,163]
movie.recs[163,]
dim(ratings_rm)
movies.predict@
info()
movies.recom <- Recommender(ratings_rm_r[1:400], method = "UBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
movies.recom <- Recommender(ratings_rm_r[1:400], method = "UBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
clearPushBack()
clear
library(reshape2)
library(dplyr)
library(recommenderlab)
library(NMF)
library(ggplot2)
movies <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/movies.csv",
stringsAsFactors = FALSE)
ratings <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/ratings.csv",
stringsAsFactors = FALSE)
ratings <- ratings[,-4]
knitr::kable(head(movies))
knitr::kable(head(ratings))
ratings_hori <- acast(ratings, userId ~ movieId, value.var="rating")
ratings_rm <- as(ratings_hori, "realRatingMatrix")
ratings_rm_r <- ratings_rm[, colCounts(ratings_rm) > 20]
dim(ratings_rm_r)
head(ratings_rm_r)
head(as(ratings_rm_r,"matrix")
)
dim(ratings_rm)
dim(ratings_rm_r)
movies.recom <- Recommender(ratings_rm_r[1:400], method = "UBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
movies.recom <- Recommender(ratings_rm_r[1:400], method = "IBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
ratings_rm_r <- normalize(ratings_rm_r)
ratings_rm_r <- as(ratings_rm_r, "matrix")
ratings_rm_r[is.na(ratings_rm_r)] <- 0
ratings_svd <- svd(ratings_rm_r)
d_cumul <- cumsum(ratings_svd$d) / sum(ratings_svd$d)
k <- min(which(d_cumul >= 0.8));k
d <- diag(sqrt(ratings_svd$d[1:k]))
u <- ratings_svd$u[,1:k]
v <- ratings_svd$v[1:k,]
recom <- data.frame(u%*%d%*%v)
colnames(recom) <- 1:668
movie.recs <- data.frame(matrix(NA, nrow = 668, ncol = 668))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
head(movie.recs)
movie.recs[3,1]
user3simi <- movie.recs[3,1]
View(movies)
user3.movies <- subset(ratings, userid = 3)
user3.movies <- subset(ratings, userid == 3)
user3.movies <- subset(ratings, userId == 3)
user3.movies
user3.best <- user3.best[order(rating)]
user3.best <- user3.movies[order(rating)]
user3.best <- user3.movies[order(rating),]
user3.best <- user3.movies[order(user3.best$rating),]
user3.best <- user3.movies[order(user3.movies$rating),]
user3.best
user3.best <- user3.movies[order(-user3.movies$rating),]
user3.best
user3.best <- head(user3.movies[order(-user3.movies$rating),],3)
user3.best
user3simi <- movie.recs[3,1]
user.movies <- subset(ratings, userId == user3simi)
user.movies
user.best <- head(user.movies[order(-user.movies$rating),],3)
user.best
user.best <- inner_join(user.best,movies,by = "movieId")
user.best
user.best <- user.best[,4:5]
user.best
user.movies <- subset(ratings, userId == 3)
user.movies
user.best <- inner_join(user.best,movies,by = "movieId")
user.movies <- subset(ratings, userId == 3)
user.best <- inner_join(user.best,movies,by = "movieId")
user.best <- inner_join(user.movies,movies,by = "movieId")
user.movies <- inner_join(user.movies,movies,by = "movieId")
user.movies
user.movies <- user.best[,4:5]
user.movies <- user.best[,5]
user.movies
user.genres <- user.best[,5]
user.genres.split <- str.split(user.genres[4],|)
user.genres.split <- str.split(user.genres[4],"|")
user.genres.split <- strsplit(user.genres[4],"|")
user.genres.split
user.genres.split <- strsplit(user.genres[4], split = "|")
user.genres.split
user.genres.split <- strsplit(user.genres[4], split = "|", fixed = TRUE)
user.genres.split
user.genres.split <- strsplit(user.genres[1], split = "|", fixed = TRUE)
user.genres.split
user.genres.split <- strsplit(user.genres, split = "|", fixed = TRUE)
user.genres.split
aggregate(data.frame(count = v), list(value = v), length)
table(user.genres.split)
user.genres.split <- strsplit(user.genres, split = "|", fixed = TRUE)
user.genres.split
str(user.genres.split)
unlist(user.genres.split)
rle(user.genres.split)
table(user.genres.split)
summary(user.genres.split)
user.genres.split
user.genres.split <- unlist(strsplit(user.genres, split = "|", fixed = TRUE))
rle(user.genres.split)
table(user.genres.split)
user.genres.count <- table(user.genres.split)
user.genres.count
max(user.genres.count)
user.movies <- subset(ratings, userId == 3, rating >= 4)
user.movies
user.movies <- subset(ratings, userId == 3, rating > 4)
user.movies <- subset(ratings, userId == 3)
View(user.movies)
user.movies <- subset(ratings, userId == 3, ratings$rating > 3.9)
user.movies <- subset(ratings, userId == 3, ratings$rating >= 3.9)
user.movies <- subset(ratings, ratings$userId == 3, ratings$rating >= 3.9)
user.movies <- subset(ratings, userId == 3, rating >= 3)
user.movies <- subset(ratings, userId == 3, rating >= 4)
user.movies <- subset(ratings, userId == 3, rating >= 5)
user.movies <- subset(user.movies, rating >= 4)
user.movies <- subset(ratings, userId == 3)
user.movies <- subset(user.movies, rating >= 4)
user.movies <- subset(ratings, userId == 3 & rating >= 4)
user.movies <- subset(ratings, userId == 3 & rating >= 4)
user.movies <- inner_join(user.movies,movies,by = "movieId")
user.genres <- user.best[,5]
user.genres.split <- unlist(strsplit(user.genres, split = "|", fixed = TRUE))
user.genres.count <- table(user.genres.split)
user.genres.count[1]
user.genres.count
user.genres.count <- data.frame(table(user.genres.split))
user.genres.count
head(user.genres.count[order(-Freq),]),3)
head(user.genres.count[order(-Freq),],3))
head(user.genres.count[order(-Freq),]3))
head(user.genres.count[order(-Freq),],3)
head(user.genres.count[order(-user.genre.count$Freq),],3)
head(user.genres.count[order(-user.genres.count$Freq),],3)
head(user.genres.count[order(-user.genres.count$Freq),],5)
movies.o <- movies[,3]
head(movie.recs)
head(movies)
head(movies.o)
genres.split <- unlist(strsplit(movies.o, split = "|", fixed = TRUE))
genres.count <- data.frame(table(genres.split))
head(genres.count[order(-genres.count$Freq),],5)
head(genres.count[order(-genres.count$Freq),],10)
library(reshape2)
library(dplyr)
library(recommenderlab)
library(NMF)
library(ggplot2)
movies <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/movies.csv",
stringsAsFactors = FALSE)
ratings <- read.csv("https://raw.githubusercontent.com/maxwagner/643/master/ml-latest-small/ratings.csv",
stringsAsFactors = FALSE)
ratings <- ratings[,-4]
knitr::kable(head(movies))
knitr::kable(head(ratings))
ratings_hori <- acast(ratings, userId ~ movieId, value.var="rating")
ratings_rm <- as(ratings_hori, "realRatingMatrix")
ratings_rm_r <- ratings_rm[, colCounts(ratings_rm) > 20]
par(mfrow=c(2,2))
hist(rowMeans(ratings_rm), breaks = 100, col = "red",
main = "User Ratings: full", xlab = "Ratings")
hist(rowMeans(ratings_rm_r), breaks = 100, col = "red",
main = "User Ratings: reduced", xlab = "Ratings")
hist(colMeans(ratings_rm), breaks = 100, col = "yellow",
main = "Movie Ratings: full", xlab = "Ratings")
hist(colMeans(ratings_rm_r), breaks = 100, col = "yellow",
main = "Movie Ratings: reduced", xlab = "Ratings")
movies.recom <- Recommender(ratings_rm_r[1:400], method = "UBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
movies.recom <- Recommender(ratings_rm_r[1:400], method = "IBCF")
movies.predict <- predict(movies.recom, ratings_rm_r[c(500, 525, 600)],n=5)
knitr::kable(as.data.frame(as(movies.predict, "list")))
ratings_rm_r <- normalize(ratings_rm_r)
ratings_rm_r <- as(ratings_rm_r, "matrix")
ratings_rm_r[is.na(ratings_rm_r)] <- 0
ratings_svd <- svd(ratings_rm_r)
d_cumul <- cumsum(ratings_svd$d) / sum(ratings_svd$d)
k <- min(which(d_cumul >= 0.8));k
d <- diag(sqrt(ratings_svd$d[1:k]))
u <- ratings_svd$u[,1:k]
v <- ratings_svd$v[1:k,]
recom <- data.frame(u%*%d%*%v)
colnames(recom) <- 1:668
movie.recs <- data.frame(matrix(NA, nrow = 668, ncol = 668))
for(i in 1:ncol(recom)) {
movie.recs[i,] <- colnames(recom[i,order(recom[i,],decreasing = TRUE)])
}
user3simi <- movie.recs[3,1]
user.movies <- subset(ratings, userId == user3simi)
user.best <- head(user.movies[order(-user.movies$rating),],3)
user.best <- inner_join(user.best,movies,by = "movieId")
user.best <- user.best[,4:5]
knitr::kable(user.best)
user.movies <- subset(ratings, userId == 3 & rating >= 4)
user.movies <- inner_join(user.movies,movies,by = "movieId")
user.genres <- user.best[,5]
user.genres.split <- unlist(strsplit(user.genres, split = "|", fixed = TRUE))
user.genres.count <- data.frame(table(user.genres.split))
knitr::kable(head(user.genres.count[order(-user.genres.count$Freq),],5))
user.movies <- subset(ratings, userId == 3 & rating >= 4)
user.movies <- inner_join(user.movies,movies,by = "movieId")
user.movies
user.best[,5]
user.genres <- user.movies[,5]
user.genres.split <- unlist(strsplit(user.genres, split = "|", fixed = TRUE))
user.genres.count <- data.frame(table(user.genres.split))
knitr::kable(head(user.genres.count[order(-user.genres.count$Freq),],5))
movies.o <- movies[,3]
genres.split <- unlist(strsplit(movies.o, split = "|", fixed = TRUE))
genres.count <- data.frame(table(genres.split))
knitr::kable(head(genres.count[order(-genres.count$Freq),],10))
